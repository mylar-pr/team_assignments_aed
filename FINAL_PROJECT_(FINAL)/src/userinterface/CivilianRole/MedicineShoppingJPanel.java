/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CivilianRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.PharmacyOrganization;
import Business.Organization.Organization;
import Business.Supplies.Medicine;
import Business.Supplies.MedicineDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MedicineWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author prajw
 */
 public class MedicineShoppingJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicineShoppingJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private MedicineDirectory medicineDirectory;
    private UserAccount account;
    private PharmacyOrganization pharmaOrganization;
    public MedicineShoppingJPanel(JPanel userProcessContainer, UserAccount account, Enterprise enterprise, EcoSystem system, PharmacyOrganization pharmaOrganization) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.medicineDirectory = medicineDirectory;
        this.system = system;
        this.account = account;
        this.pharmaOrganization = pharmaOrganization;
        System.out.println("Debug inside Medicine Shopping constructor");
        System.out.println(pharmaOrganization);
//        System.out.println(organization);
        populateMedicineTable();
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        medicineJTable = new javax.swing.JTable();
        quantityBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        requestMedicineBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        medWorkRequestJTable = new javax.swing.JTable();
        addDeliveryBackBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        medicineJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Price", "Manufacturer"
            }
        ));
        jScrollPane1.setViewportView(medicineJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 670, 117));

        quantityBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" }));
        quantityBox.setToolTipText("");
        quantityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityBoxActionPerformed(evt);
            }
        });
        add(quantityBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, -1, -1));

        jLabel1.setText("Quantity:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        requestMedicineBtn.setBackground(new java.awt.Color(0, 0, 51));
        requestMedicineBtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        requestMedicineBtn.setForeground(new java.awt.Color(255, 255, 255));
        requestMedicineBtn.setText("Place Order");
        requestMedicineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestMedicineBtnActionPerformed(evt);
            }
        });
        add(requestMedicineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 180, -1, 30));

        medWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Delivery Man", "Medicine Name", "Price", "Quantity", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(medWorkRequestJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 250, 670, 97));

        addDeliveryBackBtn.setBackground(new java.awt.Color(0, 0, 51));
        addDeliveryBackBtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        addDeliveryBackBtn.setForeground(new java.awt.Color(255, 255, 255));
        addDeliveryBackBtn.setText("Back");
        addDeliveryBackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeliveryBackBtnActionPerformed(evt);
            }
        });
        add(addDeliveryBackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, -1, 30));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        enterpriseLabel.setText("Your requests");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 230, 30));

        jButton2.setBackground(new java.awt.Color(0, 0, 102));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, -1, 30));

        jButton1.setBackground(new java.awt.Color(0, 0, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Delete Request");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 360, -1, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void quantityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityBoxActionPerformed
    
    public void populateMedicineTable(){
        DefaultTableModel medicineModel = (DefaultTableModel) medicineJTable.getModel();
        medicineModel.setRowCount(0);
//        System.out.println("inside populateMenuTable---2---");
//        medicineDirectory.getMedicine_Directory();
//        System.out.println("inside populateMenuTable---3---");
        for(Medicine item: system.getmD().getMedicine_Directory()){
//                    System.out.println("inside for loop ---3---");
                    Object[] row = new Object[3];
                    row[0] = item; 
                    row[1] = item.getMedPrice();
                    row[2] = item.getMedManufacturer();
                    medicineModel.addRow(row);
        }
    
    }
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel)medWorkRequestJTable.getModel();
        
        model.setRowCount(0);
//        System.out.println(pharmaOrganization);
        
        for(WorkRequest request : account.getWorkQueue().getWorkRequestList()){
            if (request instanceof MedicineWorkRequest)
            {
                Object[] row = new Object[7];
                row[0] = request;
                row[1] = ((MedicineWorkRequest) request).getMedName();
                row[2] = ((MedicineWorkRequest) request).getMedPrice();
                row[3] = ((MedicineWorkRequest) request).getQuantity();
                row[4] = request.getSender().getEmployee().getName();
                row[5] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[6] = request.getStatus();
            
                model.addRow(row);
            }
        }
    }
    
    public boolean isUniqueProduct(String productName){
        for(WorkRequest request: account.getWorkQueue().getWorkRequestList()){
            if(String.valueOf(request.getClass()).equalsIgnoreCase("class Business.WorkQueue.MedicineWorkRequest")){
                System.out.println(request);
                if(((MedicineWorkRequest) request).getMedName().equalsIgnoreCase(productName)){
                    return false;
                }
            }
        }
        return true;
    }
    
    private void requestMedicineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestMedicineBtnActionPerformed
        // TODO add your handling code here:
        int row = medicineJTable.getSelectedRow();
        System.out.println("Medicine shopping row"+String.valueOf(row));
        int count = medicineJTable.getSelectedRowCount();
        System.out.println("Medicine shopping row"+String.valueOf(count));
        Medicine medicine = (Medicine) medicineJTable.getModel().getValueAt(row, 0);
        //                .getDataVector().elementAt(row);
        //                .getValueAt(row, 0);

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if(!isUniqueProduct(medicine.getMedName())){
                JOptionPane.showMessageDialog(null, "You have already requested for this product. If you want to modify it, please delete it and add again.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int quantity = Integer.parseInt(quantityBox.getSelectedItem().toString());
            MedicineWorkRequest medicineRequest = new MedicineWorkRequest();
            medicineRequest.setSender(account);
            medicineRequest.setStatus("Sent");
            medicineRequest.setMedName(medicine.getMedName());
            medicineRequest.setMedPrice(medicine.getMedPrice());
            medicineRequest.setQuantity(quantity);

            Organization org = null;

            for (Network network : system.getNetworkList()) {
                //Step 2.a: check against each enterprise
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    //                    userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);

                    //Step 3:check against each organization for each enterprise
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof PharmacyOrganization) {
                            org = organization;
                            break;
                        }

                    }
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(medicineRequest);
                System.out.println("Added Request to Org ");
                account.getWorkQueue().getWorkRequestList().add(medicineRequest);
                System.out.println("Added Request to UserAccount ");
                //            dB4OUtil.storeSystem(system);
                //            System.out.println("Stored Inside System");
            }
            populateRequestTable();
            JOptionPane.showMessageDialog(null, "Request Has Been Raised. You will be notified accordingly.", "Warning", JOptionPane.WARNING_MESSAGE);
            //            populateRequestTable();
        }
        //        if(count == 1){
            //            if(row >= 0){
                //                int quantity = Integer.parseInt(quantityBox.getSelectedItem().toString());
                //                Restaurant restaurant = restaurantDirectory.getRestaurant(menuDirectory.getFoodItemByIndex(row).getRestaurantId());
                //                Customer customer = customerDirectory.getCustomer(userAccount.getEmployee().getName());
                //                FoodItem foodItem = menuDirectory.getFoodItemByIndex(row);
                //                String status = "Awaiting Order Confirmation";
                //
                //                Order orderRequest = business.getOrderDirectory().addOrder();
                //                orderRequest.setOrderId("O"+(business.getOrderDirectory().getOrderDirectory().size()));
                //                orderRequest.setOrderStatusPercentage(25);
                //                orderRequest.setFoodItem(foodItem);
                //                orderRequest.setRestaurant(restaurant);
                //                orderRequest.setCustomer(customer);
                //                orderRequest.setQuantity(quantity);
                //                orderRequest.setMessage("Order has been placed");
                //                orderRequest.setSender(userAccount);
                //                orderRequest.setStatus(status);
                //                business.getWorkQueue().getWorkRequestList().add(orderRequest);
                //                JOptionPane.showMessageDialog(null, "Your Order has been sucessfully placed!");
                //                populateRequestTable();
                //            }
            //        }
        //        else{
            //            JOptionPane.showMessageDialog(null, "Please select one row!");
            //        }
    }//GEN-LAST:event_requestMedicineBtnActionPerformed

    private void addDeliveryBackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeliveryBackBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //        StoreManagementJPanel manageMenuJPanel = (StoreManagementJPanel) component;
        //        manageMenuJPanel.populate();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_addDeliveryBackBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        populateRequestTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int row = medWorkRequestJTable.getSelectedRow();
        //        System.out.println("Groceries shopping row"+String.valueOf(row));
        int count = medWorkRequestJTable.getSelectedRowCount();
        //        System.out.println("Groceries shopping row"+String.valueOf(count));
        MedicineWorkRequest medicineRequest = (MedicineWorkRequest) medWorkRequestJTable.getModel().getValueAt(row, 0);
        account.getWorkQueue().getWorkRequestList().remove(medicineRequest);
        populateRequestTable();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDeliveryBackBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable medWorkRequestJTable;
    private javax.swing.JTable medicineJTable;
    private javax.swing.JComboBox quantityBox;
    private javax.swing.JButton requestMedicineBtn;
    // End of variables declaration//GEN-END:variables
}
