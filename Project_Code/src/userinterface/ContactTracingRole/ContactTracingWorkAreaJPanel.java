/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ContactTracingRole;

import Business.Civilian.Civilian;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.ContactTracingOrganization;
import Business.Organization.HospitalOrganization;
import Business.Organization.LabOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AssignWardWorkRequest;
import Business.WorkQueue.ContactTracingWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.MedicineWorkRequest;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import userinterface.PharmacistRole.ProcessWorkRequestJPanel;

/**
 *
 * @author nitya
 */
public class ContactTracingWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ContactTracingAdminWorkAreaJPanel
     */
    private JPanel userProcessContainer;
 private UserAccount userAccount;
 private EcoSystem system;
    private Enterprise enterprise;
   private ContactTracingOrganization contactTracingOrganization;
   private Organization org;
   
    public ContactTracingWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount,ContactTracingOrganization organization,Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.system = system;
        this.enterprise = enterprise;
        this.contactTracingOrganization = (ContactTracingOrganization)organization;
        populateTable();
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Assignbtn = new javax.swing.JButton();
        Refreshbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Civilian_Details_Tbl = new javax.swing.JTable();

        Assignbtn.setText("Assign to me");
        Assignbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignbtnActionPerformed(evt);
            }
        });

        Refreshbtn.setText("Refresh");
        Refreshbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshbtnActionPerformed(evt);
            }
        });

        jButton1.setText("Trace Contact");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Civilian_Details_Tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Patient First Name", "Patient Last Name", "Address", "Age", "Gender", "Contact Number", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Civilian_Details_Tbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(Assignbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(215, 215, 215))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Refreshbtn)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(Refreshbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assignbtn)
                    .addComponent(jButton1))
                .addGap(39, 39, 39))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void AssignbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignbtnActionPerformed
        // TODO add your handling code here:
         int selectedRow = Civilian_Details_Tbl.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        WorkRequest request = (WorkRequest)Civilian_Details_Tbl.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
//        Civilian_Details_Tbl.getModel().setValueAt("Pending", selectedRow, 7);
        populateTable();
        
    }//GEN-LAST:event_AssignbtnActionPerformed

    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)Civilian_Details_Tbl.getModel();
        
       model.setRowCount(0);
       
//        System.out.println(ContactTracingOrganization);
        for(WorkRequest request : contactTracingOrganization.getWorkQueue().getWorkRequestList()){
                System.out.println("Printing in loop");
                System.out.println(((ContactTracingWorkRequest) request).getFirstName());
                
                
            Object[] row = new Object[11];
            row[0]=request;
            row[1] = ((ContactTracingWorkRequest) request).getFirstName();
            row[2] = ((ContactTracingWorkRequest) request).getLastName();
            row[3] = ((ContactTracingWorkRequest) request).getAddress();
            row[4]=((ContactTracingWorkRequest) request).getAge();
            row[5] = ((ContactTracingWorkRequest) request).getSex();
            row[6]=((ContactTracingWorkRequest) request).getContactNo();
            row[7] = request.getSender().getEmployee().getName();
//            row[8]="Positive";
            row[8]=((ContactTracingWorkRequest) request).getStatus();
//            String result = ((MedicineWorkRequest) request).getTestResult(); 
//            row[11] = result == null ? "Positive" : result;
//            
         
            
            
//            model.addRow(row);
//                for (Civilian c : system.getCd().getCivilianList()) {
//                if (c.getUsername().equalsIgnoreCase(((ContactTracingWorkRequest) request).getUsername())) {
//                   Object[] row = new Object[11];
////            row[0]=request;
//            row[0] = c.getFirstName();
//            row[1] = c.getLastName();
//            row[2] = c.getAddress();
//            row[3]=c.getAge();
//            row[4] = c.getSex();
//            row[5]=c.getContactNo();
//            row[6] = request.getSender().getEmployee().getName();
//            row[7] = ((ContactTracingWorkRequest) request).getStatus();
//            row[8] = "Positive";
////            row[10]=request.getStatus();
////            String result = ((MedicineWorkRequest) request).getTestResult(); 
////            row[11] = result == null ? "Positive" : result;
//            
//         
//            
//            
            model.addRow(row);
//                }
//        }   
        } 
       
    }
    
   
    private void RefreshbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshbtnActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_RefreshbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          int selectedRow = Civilian_Details_Tbl.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        ContactTracingWorkRequest request = (ContactTracingWorkRequest)Civilian_Details_Tbl.getValueAt(selectedRow, 0);

        request.setStatus("Contact Traced");
        request.setTraced("yes");
        JOptionPane.showMessageDialog(null, "Contact traced successfully!");
        
        org = null;

        for (Network network : system.getNetworkList()) {
            //Step 2.a: check against each enterprise
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                //                    userAccount = enterprise.getUserAccountDirectory().authenticateUser(userName, password);

                //Step 3:check against each organization for each enterprise
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof HospitalOrganization) {
                        org = organization;
                        break;
                    }

                }
            }
        }
        if (org != null) {
            for (WorkRequest r : org.getWorkQueue().getWorkRequestList()) {
            
            if (r instanceof AssignWardWorkRequest) {
                
                if(((AssignWardWorkRequest) r).getUsername().equalsIgnoreCase(request.getUsername())){
                     
                    ((AssignWardWorkRequest) r).setTraced("Yes");
            }
        }
    }
  
            
        }
        
//        Civilian_Details_Tbl.getModel().setValueAt("VALUE", selectedRow, 7);

//        ContactTracingWorkRequestJPanel contactTracingWorkRequestJPanel = new ContactTracingWorkRequestJPanel(userProcessContainer, request);
//        userProcessContainer.add("ContactTracingWorkRequestJPanel", contactTracingWorkRequestJPanel);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Assignbtn;
    private javax.swing.JTable Civilian_Details_Tbl;
    private javax.swing.JButton Refreshbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
